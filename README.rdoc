= attr_enumerator

A method for restricting an attribute to a set of choices.

An invocation of <tt>attr_enumerator</tt> will create:

* A <b>validation</b> requiring the attribute value to be one of the provided choices
* A <b>class constant</b> containing all valid choices
* <b>Instance methods</b> for each choice, returning <tt>true</tt> if the attribute is that value and <tt>false</tt> otherwise
* <b>Scopes</b> for each choice that retrieve records where the attribute is that value (only applicable when used with <tt>ActiveRecord</tt>)

== Example

  class Car < ActiveRecord::Base
    attr_enumerator :color, ['red', 'blue']
  end

  car = Car.new
  car.color = 'red'

  car.color_red?      # => true
  car.color_blue?     # => false

  Car::COLORS         # => ['red', 'blue']

  car.save
  Car.color_red       # => [<#Car>]

  car.color = 'green'
  car.valid?          # => false
  car.errors          # => #<OrderedHash {:color=>["is invalid"]}>

== With or without ActiveRecord

The <tt>AttrEnumerator</tt> module is automatically included in <tt>ActiveRecord::Base</tt> and is available for use in all ActiveRecord models.

To use <tt>attr_enumerator</tt> on a non-ActiveRecord model the class must include <tt>ActiveModel::Validations</tt> and provide an accessor to the attribute.

  class Car
    include ActiveModel::Validations
    include AttrEnumerator

    attr_accessor :color
    attr_enumerator :color, ['red', 'blue']
  end

== Configuration

An options hash may be passed as the last argument to <tt>attr_enumerator</tt> to configure its behavior. For example:

  class Car < ActiveRecord::Base
    attr_enumerator :color, ['red', 'blue'], :constant => :PAINT_COLORS, :prefix => :colored
  end

  Car::PAINT_COLORS # => ['red', 'blue']

  car = Car.new
  car.color = 'red'
  car.colored_red?  # => true

=== Options

* <tt>constant</tt> (default: pluralized, uppercased attribute name)

  Set a custom constant name.

* <tt>prefix</tt> (default: attribute name)

  Set a custom prefix for methods and scopes. Set to <tt>false</tt> to disable.

* <tt>message</tt> (default: internationalized <tt>"is invalid"</tt>)

  Set the validation error message when the attribute is not a valid value. Use <tt>%{value}</tt> to refer to the value of the attribute, e.g. <tt>"%{value} is not a valid choice"</tt>.

* <tt>allow_nil</tt> (default: <tt>false</tt>)

  Allow the attribute to be <tt>nil</tt>.

* <tt>allow_blank</tt> (default: <tt>false</tt>)

  Allow the attribute to be blank.

* <tt>if</tt> (default: unused)

  Set a method, proc or string to call to determine if the validation should occur. See <tt>ActiveModel::Validations</tt> for more details.

* <tt>unless</tt> (default: unused)

  Set a method, proc or string to call to determine if the validation should <em>not</em> occur.

== Contributing to attr_enumerator

* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
