= attr_enumerator

A customizable method for restricting an attribute to a set of choices. 

By default, <tt>attr_enumerator</tt> will create:

* A <b>validation</b> requiring the attribute value to be one of the provided choices
* A <b>class constant</b> containing all valid choices
* <b>Instance methods</b> for each choice, returning <tt>true</tt> if the attribute is that value and <tt>false</tt> otherwise
* <b>Scopes</b> for each choice that retrieve records where the attribute is that value (only applicable when used with <tt>ActiveRecord</tt>)

The module is automatically included in <tt>ActiveRecord::Base</tt> and is available for use in all <tt>ActiveRecord</tt> models. 

  class Car < ActiveRecord::Base
    attr_enumerator :color, :in => ['red', 'blue']
  end

The above invocation the following to Car:
  car = Car.new
  car.color = 'red'
  car.save

  car.color_red?  # => true
  car.color_blue? # => false
  
  Car.color_red   # => [<#Car>]
  Car.COLORS      # => ['red', 'blue']

To use <tt>attr_enumerator</tt> on a class that does not descend from <tt>ActiveRecord::Base</tt> it must include <tt>ActiveModel::Validations</tt> and provide an accessor to the attribute.  

  class Car
    include ActiveModel::Validations
    include AttrEnumerator

    attr_accessor :color
    attr_enumerator :color, :in => ['red', 'blue']
  end

=== Options
* <tt>constant</tt>

  Defines the constant name for the enumeration.  By default, the pluralized, upper-case form of the attribute name is used.  (e.g. COLORS if attr is color, ENGINE_TYPES if attr is engine_type)
  
* <tt>prefix</tt>

  Set a custom prefix for methods and scopes.  By default, the field's name is used as a prefix.  Set to <tt>false</tt> to disable.
  
* <tt>message</tt> (default: <tt>:invalid</tt>)

  Specifies the error message when the attribute is not a valid value. Use <tt>%{value}</tt> to refer to the value of the attribute, e.g. <tt>"%{value} is not a valid choice"</tt>.

* <tt>allow_nil</tt> (default: <tt>false</tt>)

  Allow the attribute to be <tt>nil</tt>.

* <tt>allow_blank</tt> (default: <tt>false</tt>)

  Allow the attribute to be blank.

* <tt>if</tt> (default: unused)

  Specifies a method, proc or string to call to determine if the validation should occur. See <tt>ActiveModel::Validations</tt> for more details.

* <tt>unless</tt>

  Opposite of <tt>if</tt>.

== Contributing to attr_enumerator

* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.
