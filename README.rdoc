= attr_enumerator

A method for restricting an attribute to a set of choices.

An invocation of <tt>attr_enumerator</tt> will create:

* a <b>class constant</b> containing all valid choices
* a <b>validation</b> requiring the attribute's value to be one of the choices
* <b>instance methods</b> for each choice, returning <tt>true</tt> if the attribute is that value and <tt>false</tt> otherwise
* <b>scopes</b> for each choice that retrieve records where the attribute is that value

== Example

  class Car < ActiveRecord::Base
    attr_enumerator :color, ['red', 'blue']
  end

  # constant
  Car::COLORS           # => ['red', 'blue']

  # validation
  car = Car.new
  car.color = 'green'
  car.valid?            # => false
  car.errors            # => {:color => ["is invalid"]}
  car.color = 'red'
  car.valid?            # => true

  # instance methods
  car.red?              # => true
  car.blue?             # => false

  # scopes
  car.save
  Car.red               # => [<#Car>]

== With or without ActiveRecord

The <tt>AttrEnumerator</tt> module will be automatically included in <tt>ActiveRecord::Base</tt>, making the <tt>attr_enumerator</tt> method available in all ActiveRecord models.

To include <tt>AttrEnumerator</tt> on a non-ActiveRecord model the class must also include <tt>ActiveModel::Validations</tt> and provide an accessor to the attribute. The model will have all the above functionality except no scopes will be generated.

  class Car
    include ActiveModel::Validations
    include AttrEnumerator

    attr_accessor :color
    attr_enumerator :color, ['red', 'blue']
  end

== Configuration

Options may be passed as the last argument to <tt>attr_enumerator</tt> to configure its behavior. For example:

  class Car < ActiveRecord::Base
    attr_enumerator :color, ['red', 'blue'], :constant => :PAINT_COLORS, :prefix => :painted
  end

  Car::PAINT_COLORS   # => ['red', 'blue']

  car = Car.new
  car.color = 'red'
  car.painted_red?    # => true

=== Options

* <tt>constant</tt> (default: pluralized, uppercased attribute name)

  Set a custom constant name.

* <tt>prefix</tt> (default: <tt>nil</tt>)

  Set a prefix for generated methods and scopes.

* <tt>message</tt> (default: internationalized <tt>"is invalid"</tt>)

  Set the validation error message when the attribute is not a valid value. Use <tt>%{value}</tt> to refer to the value of the attribute, e.g. <tt>"%{value} is not a valid choice"</tt>.

* <tt>allow_nil</tt> / <tt>allow_blank</tt> (default: <tt>false</tt>)

  Do not fail validation when the attribute is <tt>nil</tt> or blank.

* <tt>if</tt> / <tt>unless</tt> (default: unused)

  Set a method, proc or string to call to determine if the validation should occur. See <tt>ActiveModel::Validations</tt> for more details.

== Contributing to attr_enumerator

* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Create a pull request
* Let me know if you want to be included in CONTRIBUTORS.txt
